const fs = require("fs");
const path = require("path");
const { acceptKeyboard } = require("../keyboard/keyboard");
const filePath = path.join(__dirname, "../db/db.json");
const channelId = "@hdjndjc";
const secondChannelId = "@bdjcnmdk";
const db = require("../db/db.json");

function askServer(bot, number, msg) {
  const db = JSON.parse(fs.readFileSync(filePath));
  const user = db.filter((user) => user.id === msg.from.id);

  if (user) {
    user.server = number;
    fs.writeFileSync(filePath, JSON.stringify(db, null, "\t"));
    bot.sendMessage(msg.message.chat.id, "–°–µ—Ä–≤–µ—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω");
    return user;
  }
  console.log(user.server);
}

async function askBuyCarDetails(bot, msg) {
  let user = db.find((user) => user.id === msg.from.id);
  console.log("–≤—Ö–æ–¥–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é askDetails");
  try {
    console.log("–≤—Ö–æ–¥–∏–º –≤ –±–ª–æ–∫ try");
    await bot.sendMessage(
      msg.chat.id,
      "‚ú≥Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–º–∞—Ä–∫–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç–¥):"
    );
    const cardNameMessage = await waitForText(bot, msg.from.username);

    await bot.sendMessage(
      msg.chat.id,
      "üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É:"
    );
    const cardPhotoMessage = await waitForText(bot, msg.from.username);

    await bot.sendMessage(
      channelId,
      `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ö—É–ø–∏—Ç—å\n
      üöò –ú–∞—à–∏–Ω—É\n
      üåá –°–µ—Ä–≤–µ—Ä: ‚Ññ${user.server}\n
      –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\n
      üí∞ –¶–µ–Ω–∞: ${cardPhotoMessage.text}`,
      acceptKeyboard
    );

    await bot.sendMessage(msg.chat.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é üïê");

    let keyboard = {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: "–ù–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É",
              url: `https://t.me/${msg.from.username}`,
            },
          ],
          [
            {
              text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
              url: "https://t.me/Obyavlrnie_Bot",
            },
          ],
        ],
      }),
    };
    if (msg.from.username) {
      await bot.sendMessage(
        secondChannelId,
        `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ö—É–ø–∏—Ç—å\nüè™ –ë–∏–∑–Ω–µ—Å\nüåá –°–µ—Ä–≤–µ—Ä: ‚Ññ1\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\nüí∞ –ë—é–¥–∂–µ—Ç: ${cardPhotoMessage.text}\n\n#—Å–µ—Ä–≤–µ—Ä: ${user.server}\n\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª ${msg.from.username}\n\n#—Å–µ—Ä–≤–µ—Ä: ${user.server}`,
        keyboard
      );

      await new Promise((resolve) => {
        bot.once("callback_query", async (callbackQuery) => {
          const data = callbackQuery.data;

          console.log(`–ü–æ–ª—É—á–µ–Ω callback_query: ${data}`);

          if (data === "accept") {
            await bot.sendMessage(
              secondChannelId,
              `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ö—É–ø–∏—Ç—å\nüè™ –ë–∏–∑–Ω–µ—Å\nüåá –°–µ—Ä–≤–µ—Ä: ${user.server}\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\nüí∞ –ë—é–¥–∂–µ—Ç: ${cardPhotoMessage.text}\n\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª ${msg.from.username}\n\n#—Å–µ—Ä–≤–µ—Ä: ${user.server}`,
              keyboard
            );
          } else if (data === "decline") {
            await bot.sendMessage(msg.message.chat.id, "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É");
          }

          resolve();
        });
      });
    } else {
      console.log("Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
  } catch (error) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ askDetails:", error);
    return;
  }
}

async function askBuyBusinessDetails(bot, msg) {
  let user = db.find((user) => user.id === msg.from.id);
  try {
    console.log("–≤—Ö–æ–¥–∏–º –≤ –±–ª–æ–∫ try");
    await bot.sendMessage(
      msg.chat.id,
      "‚ú≥Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–º–∞—Ä–∫–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç–¥):"
    );
    const cardNameMessage = await waitForText(bot, msg.from.username);

    await bot.sendMessage(
      msg.chat.id,
      "üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É:"
    );
    const cardPhotoMessage = await waitForText(bot, msg.from.username);

    await bot.sendMessage(
      channelId,
      `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ö—É–ø–∏—Ç—å\nüè™ –ë–∏–∑–Ω–µ—Åüåá –°–µ—Ä–≤–µ—Ä: ‚Ññ1\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\nüí∞ –ë—é–¥–∂–µ—Ç: ${cardPhotoMessage.text}`,
      acceptKeyboard
    );

    await bot.sendMessage(msg.chat.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é üïê");

    let keyboard = {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: "–ù–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É",
              url: `https://t.me/${msg.from.username}`,
            },
          ],
          [
            {
              text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
              url: "https://t.me/Obyavlrnie_Bot",
            },
          ],
        ],
      }),
    };
    if (msg.from.username) {
      await bot.sendMessage(
        secondChannelId,
        `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ö—É–ø–∏—Ç—å\nüè™ –ë–∏–∑–Ω–µ—Å\nüåá –°–µ—Ä–≤–µ—Ä: ‚Ññ1\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\nüí∞ –ë—é–¥–∂–µ—Ç: ${cardPhotoMessage.text}\n\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª ${msg.from.username}\n\n#—Å–µ—Ä–≤–µ—Ä: ${user.server}`,
        keyboard
      );

      await new Promise((resolve) => {
        bot.once("callback_query", async (callbackQuery) => {
          const data = callbackQuery.data;

          console.log(`–ü–æ–ª—É—á–µ–Ω callback_query: ${data}`);

          if (data === "accept") {
            await bot.sendMessage(
              secondChannelId,
              `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ü—Ä–æ–¥–∞—Ç—å\nüè™ –ë–∏–∑–Ω–µ—Å\nüåá –°–µ—Ä–≤–µ—Ä: ${user.server}\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\nüí∞ –ë—é–¥–∂–µ—Ç: ${cardPhotoMessage.text}\n\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª ${msg.from.username}\n\n#—Å–µ—Ä–≤–µ—Ä: ${user.server}`,
              keyboard
            );
          } else if (data === "decline") {
            await bot.sendMessage(msg.message.chat.id, "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É");
          }

          resolve();
        });
      });
    } else {
      console.log("Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
  } catch (error) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ askDetails:", error);
    return;
  }
}

async function askBuyHouseDetails(bot, msg) {
  let user = db.find((user) => user.id === msg.from.id);
  try {
    console.log("–≤—Ö–æ–¥–∏–º –≤ –±–ª–æ–∫ try");
    await bot.sendMessage(
      msg.chat.id,
      "‚ú≥Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–ª–æ–∫–∞—Ü–∏—è, –±–ª–∏–∑–æ—Å—Ç—å –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –º–µ—Å—Ç–∞–º –∏ —Ç–¥):"
    );
    const cardNameMessage = await waitForText(bot, msg.from.username);

    await bot.sendMessage(
      msg.chat.id,
      "üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É:"
    );
    const cardPhotoMessage = await waitForText(bot, msg.from.username);

    await bot.sendMessage(
      channelId,
      `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ö—É–ø–∏—Ç—å\nüè™ –ë–∏–∑–Ω–µ—Åüåá –°–µ—Ä–≤–µ—Ä: ‚Ññ1\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\nüí∞ –ë—é–¥–∂–µ—Ç: ${cardPhotoMessage.text}`,
      acceptKeyboard
    );

    await bot.sendMessage(msg.chat.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é üïê");

    let keyboard = {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: "–ù–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É",
              url: `https://t.me/${msg.from.username}`,
            },
          ],
          [
            {
              text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
              url: "https://t.me/Obyavlrnie_Bot",
            },
          ],
        ],
      }),
    };
    if (msg.from.username) {
      await bot.sendMessage(
        secondChannelId,
        `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ö—É–ø–∏—Ç—å\nüè™ –ë–∏–∑–Ω–µ—Å\nüåá –°–µ—Ä–≤–µ—Ä: ‚Ññ1\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\nüí∞ –ë—é–¥–∂–µ—Ç: ${cardPhotoMessage.text}\n\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª ${msg.from.username}\n\n#—Å–µ—Ä–≤–µ—Ä: ${user.server}`,
        keyboard
      );

      await new Promise((resolve) => {
        bot.once("callback_query", async (callbackQuery) => {
          const data = callbackQuery.data;

          console.log(`–ü–æ–ª—É—á–µ–Ω callback_query: ${data}`);

          if (data === "accept") {
            await bot.sendMessage(
              secondChannelId,
              `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ü—Ä–æ–¥–∞—Ç—å\nüè™ –ë–∏–∑–Ω–µ—Å\nüåá –°–µ—Ä–≤–µ—Ä: ${user.server}\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\nüí∞ –ë—é–¥–∂–µ—Ç: ${cardPhotoMessage.text}\n\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª ${msg.from.username}\n\n#—Å–µ—Ä–≤–µ—Ä: ${user.server}`,
              keyboard
            );
          } else if (data === "decline") {
            await bot.sendMessage(msg.message.chat.id, "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É");
          }

          resolve();
        });
      });
    } else {
      console.log("Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
  } catch (error) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ askDetails:", error);
    return;
  }
}

async function askBuyApartmentDetails(bot, msg) {
  let user = db.find((user) => user.id === msg.from.id);
  try {
    console.log("–≤—Ö–æ–¥–∏–º –≤ –±–ª–æ–∫ try");
    await bot.sendMessage(
      msg.chat.id,
      "‚ú≥Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–ª–æ–∫–∞—Ü–∏—è, –±–ª–∏–∑–æ—Å—Ç—å –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –º–µ—Å—Ç–∞–º –∏ —Ç–¥):"
    );
    const cardNameMessage = await waitForText(bot, msg.from.username);

    await bot.sendMessage(
      msg.chat.id,
      "üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É:"
    );
    const cardPhotoMessage = await waitForText(bot, msg.from.username);

    await bot.sendMessage(
      channelId,
      `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ö—É–ø–∏—Ç—å\nüè™ –ë–∏–∑–Ω–µ—Åüåá –°–µ—Ä–≤–µ—Ä: ‚Ññ1\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\nüí∞ –ë—é–¥–∂–µ—Ç: ${cardPhotoMessage.text}`,
      acceptKeyboard
    );

    await bot.sendMessage(msg.chat.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é üïê");

    let keyboard = {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: "–ù–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É",
              url: `https://t.me/${msg.from.username}`,
            },
          ],
          [
            {
              text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
              url: "https://t.me/Obyavlrnie_Bot",
            },
          ],
        ],
      }),
    };
    if (msg.from.username) {
      await bot.sendMessage(
        secondChannelId,
        `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ö—É–ø–∏—Ç—å\nüè™ –ë–∏–∑–Ω–µ—Å\nüåá –°–µ—Ä–≤–µ—Ä: ‚Ññ1\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\nüí∞ –ë—é–¥–∂–µ—Ç: ${cardPhotoMessage.text}\n\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª ${msg.from.username}\n\n#—Å–µ—Ä–≤–µ—Ä: ${user.server}`,
        keyboard
      );

      await new Promise((resolve) => {
        bot.once("callback_query", async (callbackQuery) => {
          const data = callbackQuery.data;

          console.log(`–ü–æ–ª—É—á–µ–Ω callback_query: ${data}`);

          if (data === "accept") {
            await bot.sendMessage(
              secondChannelId,
              `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ü—Ä–æ–¥–∞—Ç—å\nüè™ –ë–∏–∑–Ω–µ—Å\nüåá –°–µ—Ä–≤–µ—Ä: ${user.server}\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\nüí∞ –ë—é–¥–∂–µ—Ç: ${cardPhotoMessage.text}\n\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª ${msg.from.username}\n\n#—Å–µ—Ä–≤–µ—Ä: ${user.server}`,
              keyboard
            );
          } else if (data === "decline") {
            await bot.sendMessage(msg.message.chat.id, "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É");
          }

          resolve();
        });
      });
    } else {
      console.log("Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
  } catch (error) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ askDetails:", error);
    return;
  }
}

async function askBuySkinDetails(bot, msg) {
  let user = db.find((user) => user.id === msg.from.id);
  try {
    console.log("–≤—Ö–æ–¥–∏–º –≤ –±–ª–æ–∫ try");
    await bot.sendMessage(
      msg.chat.id,
      "‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–∫–∏–Ω–∞:"
    );
    const cardNameMessage = await waitForText(bot, msg.from.username);

    await bot.sendMessage(
      msg.chat.id,
      "üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É:"
    );
    const cardPhotoMessage = await waitForText(bot, msg.from.username);

    await bot.sendMessage(
      channelId,
      `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ö—É–ø–∏—Ç—å\nüè™ –°–µ—Ä–≤–µ—Ä: ‚Ññ1\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\nüí∞ –ë—é–¥–∂–µ—Ç: ${cardPhotoMessage.text}`,
      acceptKeyboard
    );

    await bot.sendMessage(msg.chat.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é üïê");

    let keyboard = {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: "–ù–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É",
              url: `https://t.me/${msg.from.username}`,
            },
          ],
          [
            {
              text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
              url: "https://t.me/Obyavlrnie_Bot",
            },
          ],
        ],
      }),
    };
    if (msg.from.username) {
      await bot.sendMessage(
        secondChannelId,
        `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ö—É–ø–∏—Ç—å\nüè™ –ë–∏–∑–Ω–µ—Å\nüåá –°–µ—Ä–≤–µ—Ä: ‚Ññ1\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\nüí∞ –ë—é–¥–∂–µ—Ç: ${cardPhotoMessage.text}\n\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª ${msg.from.username}\n\n#—Å–µ—Ä–≤–µ—Ä: ${user.server}`,
        keyboard
      );

      await new Promise((resolve) => {
        bot.once("callback_query", async (callbackQuery) => {
          const data = callbackQuery.data;

          console.log(`–ü–æ–ª—É—á–µ–Ω callback_query: ${data}`);

          if (data === "accept") {
            await bot.sendMessage(
              secondChannelId,
              `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ü—Ä–æ–¥–∞—Ç—å\nüè™ –ë–∏–∑–Ω–µ—Å\nüåá –°–µ—Ä–≤–µ—Ä: ${user.server}\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\nüí∞ –ë—é–¥–∂–µ—Ç: ${cardPhotoMessage.text}\n\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª ${msg.from.username}\n\n#—Å–µ—Ä–≤–µ—Ä: ${user.server}`,
              keyboard
            );
          } else if (data === "decline") {
            await bot.sendMessage(msg.message.chat.id, "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É");
          }

          resolve();
        });
      });
    } else {
      console.log("Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
  } catch (error) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ askDetails:", error);
    return;
  }
}

async function askBuyAccessoireDetails(bot, msg) {
  let user = db.find((user) => user.id === msg.from.id);
  try {
    console.log("–≤—Ö–æ–¥–∏–º –≤ –±–ª–æ–∫ try");
    await bot.sendMessage(
      msg.chat.id,
      "‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞:"
    );
    const cardNameMessage = await waitForText(bot, msg.from.username);

    await bot.sendMessage(
      msg.chat.id,
      "üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É:"
    );
    const cardPhotoMessage = await waitForText(bot, msg.from.username);

    await bot.sendMessage(
      channelId,
      `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ö—É–ø–∏—Ç—å\nüè™ –°–µ—Ä–≤–µ—Ä: ‚Ññ1\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\nüí∞ –ë—é–¥–∂–µ—Ç: ${cardPhotoMessage.text}`,
      acceptKeyboard
    );

    await bot.sendMessage(msg.chat.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é üïê");

    let keyboard = {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: "–ù–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É",
              url: `https://t.me/${msg.from.username}`,
            },
          ],
          [
            {
              text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
              url: "https://t.me/Obyavlrnie_Bot",
            },
          ],
        ],
      }),
    };
    if (msg.from.username) {
      await bot.sendMessage(
        secondChannelId,
        `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ö—É–ø–∏—Ç—å\nüè™ –ë–∏–∑–Ω–µ—Å\nüåá –°–µ—Ä–≤–µ—Ä: ‚Ññ1\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\nüí∞ –ë—é–¥–∂–µ—Ç: ${cardPhotoMessage.text}\n\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª ${msg.from.username}\n\n#—Å–µ—Ä–≤–µ—Ä: ${user.server}`,
        keyboard
      );

      await new Promise((resolve) => {
        bot.once("callback_query", async (callbackQuery) => {
          const data = callbackQuery.data;

          console.log(`–ü–æ–ª—É—á–µ–Ω callback_query: ${data}`);

          if (data === "accept") {
            await bot.sendMessage(
              secondChannelId,
              `‚ú≥Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ: –•–æ—á—É –ü—Ä–æ–¥–∞—Ç—å\nüè™ –ë–∏–∑–Ω–µ—Å\nüåá –°–µ—Ä–≤–µ—Ä: ${user.server}\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${cardNameMessage.text}\nüí∞ –ë—é–¥–∂–µ—Ç: ${cardPhotoMessage.text}\n\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª ${msg.from.username}\n\n#—Å–µ—Ä–≤–µ—Ä: ${user.server}`,
              keyboard
            );
          } else if (data === "decline") {
            await bot.sendMessage(msg.message.chat.id, "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É");
          }

          resolve();
        });
      });
    } else {
      console.log("Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
  } catch (error) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ askDetails:", error);
    return;
  }
}




async function waitForText(bot, chatId) {
  console.log("–í—Ö–æ–¥–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é waitForText");
  return new Promise((resolve) => {
    bot.onText(/.*/, (msg) => {
      if (msg.from.username === chatId) {
        resolve(msg);
      }
    });
  });
}

module.exports = {
  askServer: askServer,
  askBuyCarDetails: askBuyCarDetails,
  askBuyBusinessDetails: askBuyBusinessDetails,
  askBuyHouseDetails: askBuyHouseDetails,
  askBuyApartmentDetails: askBuyApartmentDetails,
  askBuyAccessoireDetails: askBuyAccessoireDetails,
  askBuySkinDetails: askBuySkinDetails
};
